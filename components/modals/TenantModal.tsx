import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Tenant } from "@/app/actions/properties";
import { useEffect, useState } from "react";
import { DatePicker } from "@/components/ui/date-picker";

interface TenantModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (tenant: Tenant) => void;
  tenant?: Tenant | null;
  propertyId: string;
}

export function TenantModal({ isOpen, onClose, onSubmit, tenant, propertyId }: TenantModalProps) {
  const defaultFormData = {
    name: "",
    email: "",
    lease_start: new Date().toISOString(),
    lease_end: new Date().toISOString(),
    rent_amount: 0,
    status: "active" as const,
  };

  const [formData, setFormData] = useState<Partial<Tenant>>(defaultFormData);

  // Reset form data when modal opens/closes or tenant changes
  useEffect(() => {
    if (isOpen) {
      setFormData(tenant || defaultFormData);
    } else {
      setFormData(defaultFormData);
    }
  }, [isOpen, tenant]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate required fields
    if (!formData.name?.trim()) {
      return; // Don't submit if name is empty
    }

    // Create the tenant with all required fields
    const tenantData: Tenant = {
      id: tenant?.id || "", // Will be generated by the server for new items
      property_id: propertyId,
      name: formData.name.trim(),
      email: formData.email?.trim() || "",
      lease_start: formData.lease_start || new Date().toISOString(),
      lease_end: formData.lease_end || new Date().toISOString(),
      rent_amount: formData.rent_amount || 0,
      status: formData.status || "active",
    };

    onSubmit(tenantData);
    // Reset form after submission
    setFormData(defaultFormData);
  };

  const handleClose = () => {
    setFormData(defaultFormData);
    onClose();
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>{tenant ? "Edit Tenant" : "Add New Tenant"}</DialogTitle>
          <DialogDescription>
            {tenant
              ? "Update tenant information and lease details"
              : "Add a new tenant to this property"}
          </DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit}>
          <div className="grid gap-4 py-4">
            <div className="grid gap-2">
              <Label htmlFor="name">Tenant Name</Label>
              <Input
                id="name"
                value={formData.name || ""}
                onChange={(e) =>
                  setFormData({ ...formData, name: e.target.value })
                }
                placeholder="Enter tenant name"
                required
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                value={formData.email || ""}
                onChange={(e) =>
                  setFormData({ ...formData, email: e.target.value })
                }
                placeholder="Enter tenant email"
              />
            </div>
            <div className="grid gap-2">
              <Label>Lease Start Date</Label>
              <DatePicker
                date={formData.lease_start ? new Date(formData.lease_start) : new Date()}
                onSelect={(date) =>
                  setFormData({
                    ...formData,
                    lease_start: date?.toISOString() || new Date().toISOString(),
                  })
                }
              />
            </div>
            <div className="grid gap-2">
              <Label>Lease End Date</Label>
              <DatePicker
                date={formData.lease_end ? new Date(formData.lease_end) : new Date()}
                onSelect={(date) =>
                  setFormData({
                    ...formData,
                    lease_end: date?.toISOString() || new Date().toISOString(),
                  })
                }
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="rent">Monthly Rent</Label>
              <Input
                id="rent"
                type="number"
                value={formData.rent_amount || ""}
                onChange={(e) =>
                  setFormData({
                    ...formData,
                    rent_amount: parseFloat(e.target.value) || 0,
                  })
                }
                placeholder="Enter monthly rent amount"
                required
              />
            </div>
          </div>
          <DialogFooter>
            <Button type="submit">{tenant ? "Update" : "Add"} Tenant</Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
} 